import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, f as element, g as text, A as space, h as claim_element, j as children, k as claim_text, l as detach_dev, B as claim_space, q as attr_dev, r as add_location, p as set_style, u as insert_hydration_dev, w as append_hydration_dev, J as set_data_dev, n as noop, x as binding_callbacks } from './client.6ea4d858.js';

class Draggable {

  constructor() {

    // draggable.createDraggableContent({
    //   draggableElementSelector: '.my-apples',
    //   dropAreaSelector: '.my-apple-container',
    //   eventPrefix: 'apple',
    // });
    //
    // draggable.on('dragstart:apple', (e) => {
    //
    // })


    this.ops = new Map();
    this.onDragStart = this.onDragStart.bind(this);
    this.onDrag = this.onDrag.bind(this);
    this.onDrop = this.onDrop.bind(this);
    this.dragData;
    this.placeHolder;
    this.elements;
    this.currentElement;
    this.handle;
  }

  setElement(el, hooks, handle = null) {
    this.ops.set(el, {
      hooks
    });

    this.handle = handle;
  
    (this.handle || el).setAttribute('draggable', true);
    (this.handle || el).addEventListener('dragstart', this.onDragStart);
  }

  //must create clone and dragData.clone for succesfull dragging operation
  onDragStart(e) {
    e.preventDefault();
    const op = this.ops.get(e.target);
    this.currentElement = (this.handle || e.target);

    window.addEventListener("pointermove", this.onDrag);
    window.addEventListener("pointerup", this.onDrop);

    const movingItem = this.handle ? this.handle.closest('.myitem') : e.target;

    const clone = movingItem.cloneNode(true);
    clone.classList.add("clone");

    this.dragData = {
      clone
    };

    if (op && op.hooks && op.hooks.onDragStart && typeof op.hooks.onDragStart === 'function') {
      op.hooks.onDragStart(e);
    }
  }

  onDrag(ev) {//op changes all time so we have find another way to handle mouse move
    const op = this.ops.get(this.currentElement);

    if (this.dragData && this.dragData.clone && !this.dragData.clone.parentNode) {
      document.body.appendChild(this.dragData.clone);
    }

    const centerToElement = this.handle || this.dragData.clone;

    if (this.dragData && this.dragData.clone) {
      this.dragData.clone.style.left =
        ev.clientX - centerToElement.offsetWidth / 2 + "px";
      this.dragData.clone.style.top =
        ev.clientY - centerToElement.offsetHeight / 2 + "px";
    }

    this.elements = document.elementsFromPoint(ev.clientX, ev.clientY);

    let underElement = this.elements[1].getBoundingClientRect();
    this.left = ev.clientX - underElement.left; //x position within the element.
    this.top = ev.clientY - underElement.top; //y position within the element.

    if (op && op.hooks && op.hooks.onDrag && typeof op.hooks.onDrag === 'function') {
      op.hooks.onDrag(ev);
    }
  }

  onDrop(e) {
    window.removeEventListener("pointermove", this.onDrag);
    window.removeEventListener("pointerup", this.onDrop);

    const op = this.ops.get(this.currentElement);
    this.currentElement = null;

    if (this.dragData && this.dragData.clone) {
      this.dragData.clone.remove();
    }
    this.dragData = null;

    if (op && op.hooks && op.hooks.onDrop && typeof op.hooks.onDrop === 'function') {
      op.hooks.onDrop(e);
    }
  }

}

/* src\routes\Cell.svelte generated by Svelte v3.44.1 */
const file = "src\\routes\\Cell.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let t2_value = /*row*/ ctx[0].title + "";
	let t2;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("[=]");
			t1 = space();
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, style: true, id: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "[=]");
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			t2 = claim_text(div1_nodes, t2_value);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "handle svelte-zdstf8");
			add_location(div0, file, 65, 2, 1026);
			attr_dev(div1, "class", "cell field svelte-zdstf8");
			set_style(div1, "background-color", /*row*/ ctx[0].color);
			attr_dev(div1, "id", /*id*/ ctx[1]);
			add_location(div1, file, 59, 0, 919);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t0);
			/*div0_binding*/ ctx[4](div0);
			append_hydration_dev(div1, t1);
			append_hydration_dev(div1, t2);
			/*div1_binding*/ ctx[5](div1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*row*/ 1 && t2_value !== (t2_value = /*row*/ ctx[0].title + "")) set_data_dev(t2, t2_value);

			if (dirty & /*row*/ 1) {
				set_style(div1, "background-color", /*row*/ ctx[0].color);
			}

			if (dirty & /*id*/ 2) {
				attr_dev(div1, "id", /*id*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			/*div0_binding*/ ctx[4](null);
			/*div1_binding*/ ctx[5](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function onDragStart(ev) {
	
}

function onDrag(ev) {
	
}

function onDrop() {
	
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Cell', slots, []);
	let { row } = $$props;
	let { id } = $$props;
	const draggable = new Draggable();
	let cells = [];
	let handle;

	onMount(() => {
		cells.forEach(item => {
			draggable.setElement(item, { onDragStart, onDrag, onDrop }, handle);
		});
	});

	const writable_props = ['row', 'id'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Cell> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			handle = $$value;
			$$invalidate(3, handle);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			cells[id] = $$value;
			$$invalidate(2, cells);
			$$invalidate(1, id);
		});
	}

	$$self.$$set = $$props => {
		if ('row' in $$props) $$invalidate(0, row = $$props.row);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
	};

	$$self.$capture_state = () => ({
		onMount,
		Draggable,
		row,
		id,
		draggable,
		cells,
		handle,
		onDragStart,
		onDrag,
		onDrop
	});

	$$self.$inject_state = $$props => {
		if ('row' in $$props) $$invalidate(0, row = $$props.row);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
		if ('cells' in $$props) $$invalidate(2, cells = $$props.cells);
		if ('handle' in $$props) $$invalidate(3, handle = $$props.handle);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [row, id, cells, handle, div0_binding, div1_binding];
}

class Cell extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { row: 0, id: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cell",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*row*/ ctx[0] === undefined && !('row' in props)) {
			console.warn("<Cell> was created without expected prop 'row'");
		}

		if (/*id*/ ctx[1] === undefined && !('id' in props)) {
			console.warn("<Cell> was created without expected prop 'id'");
		}
	}

	get row() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Cell$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': Cell
});

export { Cell as C, Draggable as D, Cell$1 as a };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
