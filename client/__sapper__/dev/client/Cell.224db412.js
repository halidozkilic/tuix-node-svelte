import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, f as element, g as text, A as space, h as claim_element, j as children, k as claim_text, l as detach_dev, B as claim_space, q as attr_dev, r as add_location, p as set_style, u as insert_hydration_dev, w as append_hydration_dev, J as set_data_dev, n as noop, x as binding_callbacks } from './client.06b5359d.js';
import { D as Draggable } from './Draggable.3983f0bf.js';

/* src\routes\Cell.svelte generated by Svelte v3.44.1 */
const file = "src\\routes\\Cell.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let t2_value = /*row*/ ctx[0].title + "";
	let t2;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("[=]");
			t1 = space();
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, style: true, id: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "[=]");
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			t2 = claim_text(div1_nodes, t2_value);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "handle svelte-zdstf8");
			add_location(div0, file, 66, 2, 1058);
			attr_dev(div1, "class", "cell field svelte-zdstf8");
			set_style(div1, "background-color", /*row*/ ctx[0].color);
			attr_dev(div1, "id", /*id*/ ctx[1]);
			add_location(div1, file, 60, 0, 951);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t0);
			/*div0_binding*/ ctx[4](div0);
			append_hydration_dev(div1, t1);
			append_hydration_dev(div1, t2);
			/*div1_binding*/ ctx[5](div1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*row*/ 1 && t2_value !== (t2_value = /*row*/ ctx[0].title + "")) set_data_dev(t2, t2_value);

			if (dirty & /*row*/ 1) {
				set_style(div1, "background-color", /*row*/ ctx[0].color);
			}

			if (dirty & /*id*/ 2) {
				attr_dev(div1, "id", /*id*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			/*div0_binding*/ ctx[4](null);
			/*div1_binding*/ ctx[5](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function onDragStart(ev) {
	
}

function onDrag(ev) {
	
}

function onDrop() {
	
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Cell', slots, []);
	let { row } = $$props;
	let { id } = $$props;
	const draggable = new Draggable();
	draggable.closest = 'field';
	let cells = [];
	let handle;

	onMount(() => {
		cells.forEach(item => {
			draggable.setElement(item, { onDragStart, onDrag, onDrop }, handle);
		});
	});

	const writable_props = ['row', 'id'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Cell> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			handle = $$value;
			$$invalidate(3, handle);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			cells[id] = $$value;
			$$invalidate(2, cells);
			$$invalidate(1, id);
		});
	}

	$$self.$$set = $$props => {
		if ('row' in $$props) $$invalidate(0, row = $$props.row);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
	};

	$$self.$capture_state = () => ({
		onMount,
		Draggable,
		row,
		id,
		draggable,
		cells,
		handle,
		onDragStart,
		onDrag,
		onDrop
	});

	$$self.$inject_state = $$props => {
		if ('row' in $$props) $$invalidate(0, row = $$props.row);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
		if ('cells' in $$props) $$invalidate(2, cells = $$props.cells);
		if ('handle' in $$props) $$invalidate(3, handle = $$props.handle);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [row, id, cells, handle, div0_binding, div1_binding];
}

class Cell extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { row: 0, id: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cell",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*row*/ ctx[0] === undefined && !('row' in props)) {
			console.warn("<Cell> was created without expected prop 'row'");
		}

		if (/*id*/ ctx[1] === undefined && !('id' in props)) {
			console.warn("<Cell> was created without expected prop 'id'");
		}
	}

	get row() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Cell as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2VsbC4yMjRkYjQxMi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9DZWxsLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gIGltcG9ydCB7b25Nb3VudH0gZnJvbSAnc3ZlbHRlJztcclxuICBpbXBvcnQge0RyYWdnYWJsZX0gZnJvbSAnLi9EcmFnZ2FibGUuanMnO1xyXG5cclxuICBleHBvcnQgbGV0IHJvdztcclxuICBleHBvcnQgbGV0IGlkO1xyXG5cclxuICBjb25zdCBkcmFnZ2FibGUgPSBuZXcgRHJhZ2dhYmxlKCk7XHJcbiAgZHJhZ2dhYmxlLmNsb3Nlc3QgPSAnZmllbGQnO1xyXG5cclxuICBsZXQgY2VsbHMgPSBbXTtcclxuICBsZXQgaGFuZGxlO1xyXG5cclxuICBmdW5jdGlvbiBvbkRyYWdTdGFydChldikge1xyXG5cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRHJhZyhldikge1xyXG5cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRHJvcCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBvbk1vdW50KCgpID0+IHtcclxuICAgIGNlbGxzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgZHJhZ2dhYmxlLnNldEVsZW1lbnQoaXRlbSwge1xyXG4gICAgICAgIG9uRHJhZ1N0YXJ0LFxyXG4gICAgICAgIG9uRHJhZyxcclxuICAgICAgICBvbkRyb3BcclxuICAgICAgfSwgaGFuZGxlKVxyXG4gICAgfSlcclxuICB9KTtcclxuXHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gICAgLmNlbGwge1xyXG4gICAgICAgIGZsZXg6IDE7XHJcbiAgICAgICAgY29sb3I6ICNiYmI7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzg4ODtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIC5jZWxsOm5vdCg6Zmlyc3Qtb2YtdHlwZSksXHJcbiAgICAuY2VsbDpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAuaGFuZGxlIHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgbGVmdDogNHB4O1xyXG4gICAgICAgIGN1cnNvcjogZ3JhYjtcclxuICAgICAgICBmb250LXNpemU6IDEwcHg7XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2XHJcbiAgY2xhc3M9XCJjZWxsIGZpZWxkXCJcclxuICBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IHtyb3cuY29sb3J9XCJcclxuICB7aWR9XHJcbiAgYmluZDp0aGlzPXtjZWxsc1tpZF19XHJcbj5cclxuICA8ZGl2XHJcbiAgICBjbGFzcz1cImhhbmRsZVwiXHJcbiAgICBiaW5kOnRoaXM9e2hhbmRsZX1cclxuICA+XHJcbiAgICBbPV1cclxuICA8L2Rpdj5cclxuICB7cm93LnRpdGxlfVxyXG48L2Rpdj5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O3dCQXdFRyxHQUFHLElBQUMsS0FBSzs7Ozs7OzthQUhULEtBRUQ7Ozs7Ozs7Ozs7K0JBRkMsS0FFRDs7Ozs7Ozs7Ozs7K0NBVDBCLEdBQUcsSUFBQyxLQUFLOzs7OztHQUZyQyxvQkFhTTtHQVBKLG9CQUtNOzs7Ozs7Ozs2REFDTCxHQUFHLElBQUMsS0FBSzs7O2dEQVZnQixHQUFHLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBakQxQixXQUFXLENBQUMsRUFBRTs7OztTQUlkLE1BQU0sQ0FBQyxFQUFFOzs7O1NBSVQsTUFBTTs7Ozs7OztPQWpCSixHQUFHO09BQ0gsRUFBRTtPQUVQLFNBQVMsT0FBTyxTQUFTO0NBQy9CLFNBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTztLQUV2QixLQUFLO0tBQ0wsTUFBTTs7Q0FjVixPQUFPO0VBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFJO0dBQ2pCLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUN2QixXQUFXLEVBQ1gsTUFBTSxFQUNOLE1BQU0sSUFDTCxNQUFNOzs7Ozs7Ozs7Ozs7R0FxQ0EsTUFBTTs7Ozs7OztHQUpSLEtBQUssQ0FBQyxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
